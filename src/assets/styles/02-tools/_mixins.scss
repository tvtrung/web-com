@use 'sass:math';
@use 'sass:list';

@mixin lang-ja {
  html[lang='ja'] {
    @content;
  }
}

@mixin lang-vi {
  html[lang='vi'] {
    @content;
  }
}

@mixin font-other($lang) {
  &:lang(#{$lang}) {
    @content;
  }
}

// responsive related mixins
@mixin pc-large {
  @media (min-width: $width-pc-large) {
    @content;
  }
}

@mixin only-pc {
  @media (min-width: $width-pc + 1) {
    @content;
  }
}

@mixin pc {
  @media (min-width: $width-sp + 1) {
    @content;
  }
}

@mixin both-tablet-and-pc {
  @media (min-width: $tablet + 1) {
    @content;
  }
}

@mixin tablet-pc {
  @media (min-width: $width-sp + 1) and (max-width: $width-pc-medium) {
    @content;
  }
}

@mixin tablet {
  @media (min-width: $width-sp + 1) and (max-width: $width-pc) {
    @content;
  }
}

@mixin tablet-small {
  @media (min-width: $width-sp + 1) and (max-width: $tablet) {
    @content;
  }
}

@mixin sp {
  @media (max-width: $width-sp) {
    @content;
  }
}

@mixin sp-small {
  @media (max-width: 374px) {
    @content;
  }
}

@mixin both-sp-and-tablet {
  @media (max-width: $width-pc) {
    @content;
  }
}

@mixin both-sp-and-tablet-small {
  @media (max-width: $tablet) {
    @content;
  }
}

@mixin lanscape {
  @media (orientation: landscape) {
    @content;
  }
}
@mixin portrait {
  @media (orientation: portrait) {
    @content;
  }
}

/*
convert line-height value into relative value.
If cutLineSpace=true, the spacing the top of first-line & the bottom of last-line caused by line-height will be killed.
--------------------------------------------------------- */
@mixin u-fz($fontsize, $lineheight, $cutlinespace: false, $convertvw: false) {
  font-size: $fontsize + px;
  line-height: math.div($lineheight, $fontsize);

  // TODO: Still in decision to enable/remove
  @if $convertvw {
    @include tablet {
      font-size: convert-vw($fontsize);
    }
  }

  @if $cutlinespace {
    &:before,
    &:after {
      display: block;
      overflow: hidden;
      content: '';
    }

    $margin-val: ($lineheight - $fontsize) * -0.5;

    &:before {
      margin-bottom: $margin-val + px;
    }

    &:after {
      margin-top: $margin-val + px;
    }
  }
}

// Convert Image aspectRatio
@mixin aspect-ratio($width: 1, $height: 1) {
  padding-bottom: math.div($height, $width) * 100%;
}

// Transition
@mixin transitions($props, $transition) {
  $transitions: ();
  @each $prop in $props {
    $transitions: list.append($transitions, list.join($prop, $transition, space), comma);
  }

  transition: $transitions;
}
